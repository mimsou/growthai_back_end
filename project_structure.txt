import { Test, TestingModule } from '@nestjs/testing'; 
import { Test, TestingModule } from '@nestjs/testing'; 
import { AppController } from './app.controller'; 
import { AppController } from './app.controller'; 
import { AppService } from './app.service'; 
import { AppService } from './app.service'; 
let appController: AppController; 
const app: TestingModule = await Test.createTestingModule({ 
controllers: [AppController], 
providers: [AppService], 
expect(appController.getHello()).toBe('Hello World'); 
 
import { Controller, Get } from '@nestjs/common'; 
import { Controller, Get } from '@nestjs/common'; 
import { AppService } from './app.service'; 
import { AppService } from './app.service'; 
export class AppController { 
constructor(private readonly appService: AppService) {} 
getHello(): string { 
return this.appService.getHello(); 
 
import { Module } from '@nestjs/common'; 
import { Module } from '@nestjs/common'; 
import { MongooseModule } from '@nestjs/mongoose'; 
import { MongooseModule } from '@nestjs/mongoose'; 
import { ConfigModule, ConfigService } from '@nestjs/config'; 
import { ConfigModule, ConfigService } from '@nestjs/config'; 
import { AuthModule } from './auth/auth.module'; 
import { AuthModule } from './auth/auth.module'; 
import { SEOModule } from './seo/seo.module'; 
import { SEOModule } from './seo/seo.module'; 
import { AuditSessionModule } from './audit/audit-session.module'; 
import { AuditSessionModule } from './audit/audit-session.module'; 
import { AIModule } from './ai/ai.module'; 
import { AIModule } from './ai/ai.module'; 
import { CrawlerModule } from './crawler/core/crawler.module'; 
import { CrawlerModule } from './crawler/core/crawler.module'; 
imports: [ 
imports: [ 
ConfigModule.forRoot({ 
isGlobal: true, 
envFilePath: '.env', 
MongooseModule.forRootAsync({ 
imports: [ConfigModule], 
imports: [ConfigModule], 
useNewUrlParser: true, 
useUnifiedTopology: true, 
inject: [ConfigService], 
AuthModule, 
SEOModule, 
AuditSessionModule, 
AIModule, 
CrawlerModule 
controllers: [], 
providers: [], 
export class AppModule {} 
 
import { Injectable } from '@nestjs/common'; 
import { Injectable } from '@nestjs/common'; 
export class AppService { 
getHello(): string { 
return 'Hello World'; 
 
import { NestFactory } from '@nestjs/core'; 
import { NestFactory } from '@nestjs/core'; 
import { AppModule } from './app.module'; 
import { AppModule } from './app.module'; 
import { ValidationPipe } from '@nestjs/common'; 
import { ValidationPipe } from '@nestjs/common'; 
import { IoAdapter } from '@nestjs/platform-socket.io'; 
import { IoAdapter } from '@nestjs/platform-socket.io'; 
import * as os from 'os'; 
import * as os from 'os'; 
async function bootstrap() { 
const app = await NestFactory.create(AppModule); 
app.enableCors({ 
origin: 'http://localhost:3000', 
methods: 'GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS', 
credentials: true, 
allowedHeaders: ['Content-Type', 'Authorization'], 
app.useWebSocketAdapter(new IoAdapter(app)); 
app.setGlobalPrefix('api'); 
app.useGlobalPipes(new ValidationPipe()); 
const numCPUs = os.cpus().length; 
const maxThreads = Math.min(numCPUs, parseInt(process.env.CRAWLER_MAX_THREADS) || 4); 
process.env.UV_THREADPOOL_SIZE = maxThreads.toString(); 
ECHO is off.
await app.listen(process.env.PORT || 5000); 
 
    import { Controller, Post, Body, Res } from '@nestjs/common'; 
    import { Controller, Post, Body, Res } from '@nestjs/common'; 
    import { AIService } from './ai.service'; 
    import { AIService } from './ai.service'; 
    import { OllamaService } from './agent/ollama.agent.service'; 
    import { OllamaService } from './agent/ollama.agent.service'; 
    import { AiPromptService } from './prompt/ai.prompt.service'; 
    import { AiPromptService } from './prompt/ai.prompt.service'; 
    import { Response } from 'express'; // Import Express Response 
    import { Response } from 'express'; // Import Express Response 
    export class AiController { 
    constructor(private readonly aiService: AIService, private readonly ollamaService: OllamaService, private readonly aiPromptService: AiPromptService) {} 
    const content = await this.aiService.getData(data.seoSubject, data.sessionId); 
    const prompt = await this.aiPromptService.getPromptBySeoSubject(data.seoSubject); 
    res.setHeader('Content-Type', 'application/json'); 
    res.setHeader('Transfer-Encoding', 'chunked'); // Important for streaming response 
    await this.ollamaService.streamResponse(prompt, content, res); 
 
    import { Module , forwardRef } from '@nestjs/common'; 
    import { Module , forwardRef } from '@nestjs/common'; 
    import { AIService } from './ai.service'; 
    import { AIService } from './ai.service'; 
    import { SeoStrategy } from './ai.seo.strategy';  
    import { SeoStrategy } from './ai.seo.strategy';  
    import { RobotsService } from '../seo/robots/robots.service'; 
    import { RobotsService } from '../seo/robots/robots.service'; 
    import { SEOModule } from 'src/seo/seo.module'; 
    import { SEOModule } from 'src/seo/seo.module'; 
    import { SEOEnum } from 'src/enum/seo.enum'; 
    import { SEOEnum } from 'src/enum/seo.enum'; 
    import { MongooseModule } from '@nestjs/mongoose'; 
    import { MongooseModule } from '@nestjs/mongoose'; 
    import { SeoServiceInterface } from 'src/seo/seo.interface'; 
    import { SeoServiceInterface } from 'src/seo/seo.interface'; 
    import { RobotsData, RobotsDataSchema } from '../seo/robots/robots-data.schema'; 
    import { RobotsData, RobotsDataSchema } from '../seo/robots/robots-data.schema'; 
    import { PromptData, PromptDataSchema } from  '../ai/prompt/ai.prompt-data.schema'; 
    import { PromptData, PromptDataSchema } from  '../ai/prompt/ai.prompt-data.schema'; 
    import { AiController } from './ai.controller'; 
    import { AiController } from './ai.controller'; 
    import { AgentModule } from './agent/agent.modules'; 
    import { AgentModule } from './agent/agent.modules'; 
    import { AiPromptService } from './prompt/ai.prompt.service'; 
    import { AiPromptService } from './prompt/ai.prompt.service'; 
    imports: [ 
    imports: [ 
    MongooseModule.forFeature([ 
    AgentModule 
    providers: [AIService,SeoStrategy, 
    provide: 'seoServices', 
    seoServices.set(SEOEnum.ROBOT, robotsService); 
    return seoServices; 
    inject: [RobotsService], 
    RobotsService, 
    AiPromptService], 
    controllers: [AiController], 
    exports: [AIService], 
    export class AIModule { 
 
    import { Inject, Injectable } from '@nestjs/common'; 
    import { Inject, Injectable } from '@nestjs/common'; 
    import { SeoServiceInterface } from '../seo/seo.interface'; 
    import { SeoServiceInterface } from '../seo/seo.interface'; 
    export class SeoStrategy { 
    const seoService = this.seoServices.get(seoSubject); 
    if (seoService) { 
    throw new Error(`No SEO service found for subject: ${seoSubject}`); 
    return await seoService.getData(sessionId); 
    addSeoService(seoSubject: string, seoService: SeoServiceInterface): void { 
    this.seoServices.set(seoSubject, seoService); 
 
    import { Injectable } from '@nestjs/common'; 
    import { Injectable } from '@nestjs/common'; 
    import { SeoStrategy } from './ai.seo.strategy'; 
    import { SeoStrategy } from './ai.seo.strategy'; 
    export class AIService { 
    constructor(private readonly seoStrategy: SeoStrategy) {} 
    return this.seoStrategy.execute(seoSubject, sessionId); 
 
        import { Module } from '@nestjs/common'; 
        import { Module } from '@nestjs/common'; 
        import { OllamaService } from './ollama.agent.service'; 
        import { OllamaService } from './ollama.agent.service'; 
        import { HttpModule } from '@nestjs/axios'; 
        import { HttpModule } from '@nestjs/axios'; 
ECHO is off.
        const agentProviders = [ 
        OllamaService, 
        imports: [HttpModule], 
        imports: [HttpModule], 
        providers: [...agentProviders], 
        exports: [...agentProviders], 
        export class AgentModule {} 
 
        import { Injectable, HttpException, HttpStatus } from '@nestjs/common'; 
        import { Injectable, HttpException, HttpStatus } from '@nestjs/common'; 
        import { HttpService } from '@nestjs/axios'; 
        import { HttpService } from '@nestjs/axios'; 
        import { ConfigService } from '@nestjs/config'; 
        import { ConfigService } from '@nestjs/config'; 
        import { Response } from 'express'; 
        import { Response } from 'express'; 
        export class OllamaService { 
        private readonly baseUrl: string; 
        private readonly httpService: HttpService; 
        constructor(private readonly configService: ConfigService, httpService: HttpService) { 
        this.httpService = httpService; 
        const endpoint = `${this.baseUrl}/api/generate`; 
        try { 
        const response = await this.httpService.post(endpoint, { 
        model: 'llama3.1:8b', 
        prompt: `${prompt} ${context}`, 
        if (response.data) { 
        throw new HttpException(`Error contacting the AI model`, HttpStatus.INTERNAL_SERVER_ERROR); 
        res.write(chunk); 
        res.end(); 
        console.error(error); 
        throw new HttpException(`Error contacting the AI model: ${error.message}`, HttpStatus.INTERNAL_SERVER_ERROR); 
 
            import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose'; 
            import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose'; 
            import { Document } from 'mongoose'; 
            import { Document } from 'mongoose'; 
            export class PromptData extends Document { 
            seoSubject: string; 
            content?: string; 
            export const PromptDataSchema = SchemaFactory.createForClass(PromptData); 
 
            import { Injectable } from '@nestjs/common'; 
            import { Injectable } from '@nestjs/common'; 
            import { InjectModel } from '@nestjs/mongoose'; 
            import { InjectModel } from '@nestjs/mongoose'; 
            import { Model } from 'mongoose'; 
            import { Model } from 'mongoose'; 
            import {PromptData } from './ai.prompt-data.schema'; 
            import {PromptData } from './ai.prompt-data.schema'; 
            export class AiPromptService { 
            constructor( 
            const result = await this.promptDataModel.find({ seoSubject: seoSubject }).exec(); 
            if (result) return null; 
 
                import { Controller, Post, UseGuards, Request } from '@nestjs/common'; 
                import { Controller, Post, UseGuards, Request } from '@nestjs/common'; 
                import { AuditSessionService } from './audit-session.service'; 
                import { AuditSessionService } from './audit-session.service'; 
                import { JwtAuthGuard } from '../common/guards/jwt-auth.guard'; 
                import { JwtAuthGuard } from '../common/guards/jwt-auth.guard'; 
                export class AuditSessionController { 
                constructor(private readonly auditSessionService: AuditSessionService) {} 
                async createAuditSession(@Request() req: any) { 
                const userId = "66eefa9b8319d7e5b17f4d70" 
                const session = await this.auditSessionService.createAuditSession(userId); 
                return { auditId: session.auditId }; 
 
                import { Module } from '@nestjs/common'; 
                import { Module } from '@nestjs/common'; 
                import { MongooseModule } from '@nestjs/mongoose'; 
                import { MongooseModule } from '@nestjs/mongoose'; 
                import { AuditSessionController } from './audit-session.controller'; 
                import { AuditSessionController } from './audit-session.controller'; 
                import { AuditSessionService } from './audit-session.service'; 
                import { AuditSessionService } from './audit-session.service'; 
                import { AuditSession, AuditSessionSchema } from './audit-session.schema'; 
                import { AuditSession, AuditSessionSchema } from './audit-session.schema'; 
                imports: [MongooseModule.forFeature([{ name: AuditSession.name, schema: AuditSessionSchema }])], 
                imports: [MongooseModule.forFeature([{ name: AuditSession.name, schema: AuditSessionSchema }])], 
                controllers: [AuditSessionController], 
                providers: [AuditSessionService], 
                export class AuditSessionModule {} 
 
                import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose'; 
                import { Prop, Schema, SchemaFactory } from '@nestjs/mongoose'; 
                import { Document } from 'mongoose'; 
                import { Document } from 'mongoose'; 
                import { v4 as uuidv4 } from 'uuid';  
                import { v4 as uuidv4 } from 'uuid';  
                export class AuditSession extends Document { 
                auditId: string; 
                userId: string; 
                startDateTime: Date; 
                export const AuditSessionSchema = SchemaFactory.createForClass(AuditSession); 
 
                import { Injectable } from '@nestjs/common'; 
                import { Injectable } from '@nestjs/common'; 
                import { InjectModel } from '@nestjs/mongoose'; 
                import { InjectModel } from '@nestjs/mongoose'; 
                import { Model } from 'mongoose'; 
                import { Model } from 'mongoose'; 
                import { AuditSession } from './audit-session.schema'; 
                import { AuditSession } from './audit-session.schema'; 
                export class AuditSessionService { 
                constructor( 
                const newAuditSession = new this.auditSessionModel({ userId }); 
                return newAuditSession.save(); 
 
                    import { Body, Controller, Get, Post, UseGuards, UnauthorizedException, Req } from '@nestjs/common'; 
                    import { Body, Controller, Get, Post, UseGuards, UnauthorizedException, Req } from '@nestjs/common'; 
                    import { AuthService } from './auth.service'; 
                    import { AuthService } from './auth.service'; 
                    import { RegisterUserDto } from './dto/register-user.dto'; 
                    import { RegisterUserDto } from './dto/register-user.dto'; 
                    import { LoginUserDto } from './dto/login-user.dto'; 
                    import { LoginUserDto } from './dto/login-user.dto'; 
                    import { AuthGuard } from '@nestjs/passport'; 
                    import { AuthGuard } from '@nestjs/passport'; 
                    import { GoogleTokenDto } from './dto/google-token.dto'; 
                    import { GoogleTokenDto } from './dto/google-token.dto'; 
                    export class AuthController { 
                    constructor(private readonly authService: AuthService) {} 
                    async register(@Body() registerDto: RegisterUserDto) { 
                    return this.authService.register(registerDto); 
                    async login(@Body() loginDto: LoginUserDto) { 
                    const user = await this.authService.validateUser(loginDto.email, loginDto.password); 
                    if (user) { 
                    throw new UnauthorizedException('Invalid credentials'); 
                    return this.authService.login(user); 
                    async googleLogin(@Body() googleTokenDto: GoogleTokenDto) { 
                    return this.authService.verifyGoogleTokenAndLogin(googleTokenDto.token); 
                    getProtected() { 
                    return "This is a protected route"; 
 
                    import { Module } from '@nestjs/common'; 
                    import { Module } from '@nestjs/common'; 
                    import { JwtModule } from '@nestjs/jwt'; 
                    import { JwtModule } from '@nestjs/jwt'; 
                    import { PassportModule } from '@nestjs/passport'; 
                    import { PassportModule } from '@nestjs/passport'; 
                    import { AuthService } from './auth.service'; 
                    import { AuthService } from './auth.service'; 
                    import { AuthController } from './auth.controller'; 
                    import { AuthController } from './auth.controller'; 
                    import { JwtStrategy } from './jwt.strategy'; 
                    import { JwtStrategy } from './jwt.strategy'; 
                    import { MongooseModule } from '@nestjs/mongoose'; 
                    import { MongooseModule } from '@nestjs/mongoose'; 
                    import { User, UserSchema } from '../users/user.schema'; 
                    import { User, UserSchema } from '../users/user.schema'; 
                    import { UserService } from 'src/users/user.service'; 
                    import { UserService } from 'src/users/user.service'; 
                    imports: [ 
                    imports: [ 
                    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]), 
                    PassportModule, 
                    JwtModule.register({ 
                    secret: process.env.JWT_SECRET || 'defaultSecret', 
                    signOptions: { expiresIn: '60m' }, 
                    providers: [AuthService, UserService, JwtStrategy], 
                    controllers: [AuthController], 
                    export class AuthModule {} 
 
                    import { Injectable, UnauthorizedException } from '@nestjs/common'; 
                    import { Injectable, UnauthorizedException } from '@nestjs/common'; 
                    import { JwtService } from '@nestjs/jwt'; 
                    import { JwtService } from '@nestjs/jwt'; 
                    import { UserService } from '../users/user.service'; 
                    import { UserService } from '../users/user.service'; 
                    import { InjectModel } from '@nestjs/mongoose'; 
                    import { InjectModel } from '@nestjs/mongoose'; 
                    import { Model } from 'mongoose'; 
                    import { Model } from 'mongoose'; 
                    import { User } from '../users/user.schema'; 
                    import { User } from '../users/user.schema'; 
                    import { JwtPayload } from './interfaces/jwt-payload.interface'; 
                    import { JwtPayload } from './interfaces/jwt-payload.interface'; 
                    import { RegisterUserDto } from './dto/register-user.dto'; 
                    import { RegisterUserDto } from './dto/register-user.dto'; 
                    import * as bcrypt from 'bcrypt'; 
                    import * as bcrypt from 'bcrypt'; 
                    import { OAuth2Client } from 'google-auth-library'; 
                    import { OAuth2Client } from 'google-auth-library'; 
                    export class AuthService { 
                    private googleClient: OAuth2Client; 
                    constructor( 
                    private readonly userService: UserService, 
                    private readonly jwtService: JwtService, 
                    console.log(process.env.GOOGLE_CLIENT_ID) 
                    this.googleClient = new OAuth2Client("244958252159-hl1ir8a7isdhpletnuuvbdobtdcfjebk.apps.googleusercontent.com"); 
                    async register(registerDto: RegisterUserDto) { 
                    const { username, password, email } = registerDto; 
                    const newUser = new this.userModel({ username, email, password }); 
                    return newUser.save(); 
                    const user = await this.userModel.findOne({ email }).exec(); 
                    if (user && await bcrypt.compare(pass, user.password)) { 
                    const { password, ...result } = user; 
                    return result; 
                    return null; 
                    async login(user: any) { 
                    const payload = { email: user.email, sub: user._id }; 
                    return { 
                    access_token: this.jwtService.sign(payload), 
                    async verifyGoogleTokenAndLogin(token: string) { 
                    const ticket = await this.googleClient.verifyIdToken({ 
                    idToken: token, 
                    audience: "244958252159-hl1ir8a7isdhpletnuuvbdobtdcfjebk.apps.googleusercontent.com", 
                    const payload = ticket.getPayload(); 
                    if (payload) { 
                    throw new UnauthorizedException('Google token is invalid'); 
                    let user = await this.userService.findOne(payload.email); 
                    if (user) { 
                    user = await this.userService.create({ 
                    username: payload.name, 
                    email: payload.email, 
                    password: await bcrypt.hash(Math.random().toString(36).slice(-8), 10), 
                    return this.generateJwtToken(user); 
                    async generateJwtToken(user: User) { 
                    const payload = { email: user.email, sub: user._id }; 
                    return { 
                    access_token: this.jwtService.sign(payload), 
                    return this.userModel.findOne({ _id: payload.sub }).exec(); 
 
                    import { Injectable, UnauthorizedException } from '@nestjs/common'; 
                    import { Injectable, UnauthorizedException } from '@nestjs/common'; 
                    import { PassportStrategy } from '@nestjs/passport'; 
                    import { PassportStrategy } from '@nestjs/passport'; 
                    import { ExtractJwt, Strategy } from 'passport-jwt'; 
                    import { ExtractJwt, Strategy } from 'passport-jwt'; 
                    import { AuthService } from './auth.service'; 
                    import { AuthService } from './auth.service'; 
                    import { JwtPayload } from './interfaces/jwt-payload.interface'; 
                    import { JwtPayload } from './interfaces/jwt-payload.interface'; 
                    export class JwtStrategy extends PassportStrategy(Strategy) { 
                    constructor(private authService: AuthService) { 
                    super({ 
                    jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(), 
                    ignoreExpiration: false, 
                    secretOrKey: process.env.JWT_SECRET || 'defaultSecret', 
                    async validate(payload: JwtPayload) { 
                    const user = await this.authService.validateUserByJwt(payload); 
                    if (user) { 
                    throw new UnauthorizedException(); 
                    return user; 
 
                        import { IsEmail, IsNotEmpty, MinLength } from 'class-validator'; 
                        import { IsEmail, IsNotEmpty, MinLength } from 'class-validator'; 
                        export class CreateUserDto { 
                        name: string; 
                        email: string; 
                        password: string; 
 
                        import { IsNotEmpty } from 'class-validator'; 
                        import { IsNotEmpty } from 'class-validator'; 
                        export class GoogleTokenDto { 
                        token: string; 
 
                        import { IsEmail, IsNotEmpty } from 'class-validator'; 
                        import { IsEmail, IsNotEmpty } from 'class-validator'; 
                        export class LoginUserDto { 
                        email: string; 
                        password: string; 
 
                        import { IsEmail, IsNotEmpty, MinLength } from 'class-validator'; 
                        import { IsEmail, IsNotEmpty, MinLength } from 'class-validator'; 
                        export class RegisterUserDto { 
                        username: string; 
                        email: string; 
                        password: string; 
 
                            export interface JwtPayload { 
                            email: string; 
                            sub: string; 
ECHO is off.
 
                                    import { Injectable } from '@nestjs/common'; 
                                    import { Injectable } from '@nestjs/common'; 
                                    import { AuthGuard } from '@nestjs/passport'; 
                                    import { AuthGuard } from '@nestjs/passport'; 
                                    export class JwtAuthGuard extends AuthGuard('jwt') {} 
 
                                        import { MongooseModuleOptions } from '@nestjs/mongoose'; 
                                        import { MongooseModuleOptions } from '@nestjs/mongoose'; 
                                        import * as dotenv from 'dotenv'; 
                                        import * as dotenv from 'dotenv'; 
                                        dotenv.config(); 
                                        export const mongooseConfig: MongooseModuleOptions = { 
                                        uri: process.env.MONGO_URI  
 
                                                import { Injectable } from '@nestjs/common'; 
                                                import { Injectable } from '@nestjs/common'; 
                                                import { ConfigService } from '@nestjs/config'; 
                                                import { ConfigService } from '@nestjs/config'; 
                                                import { InclusionExclusionService, Rule } from './inclusion-exclusion.service'; 
                                                import { InclusionExclusionService, Rule } from './inclusion-exclusion.service'; 
                                                import { GeneralConfig } from './sub-configs/general.config'; 
                                                import { GeneralConfig } from './sub-configs/general.config'; 
                                                import { SitemapConfig } from './sub-configs/sitemap.config'; 
                                                import { SitemapConfig } from './sub-configs/sitemap.config'; 
                                                import { DirectoryTreeConfig } from './sub-configs/directory-tree.config'; 
                                                import { DirectoryTreeConfig } from './sub-configs/directory-tree.config'; 
                                                import { MultithreadingConfig } from './sub-configs/multithreading.config'; 
                                                import { MultithreadingConfig } from './sub-configs/multithreading.config'; 
                                                import { AsyncOperationsConfig } from './sub-configs/async-operations.config'; 
                                                import { AsyncOperationsConfig } from './sub-configs/async-operations.config'; 
                                                import { RateLimitConfig } from './sub-configs/rate-limit.config'; 
                                                import { RateLimitConfig } from './sub-configs/rate-limit.config'; 
                                                import { HttpHeaderConfig } from './sub-configs/http-header.config'; 
                                                import { HttpHeaderConfig } from './sub-configs/http-header.config'; 
                                                export class CrawlerConfigService { 
                                                private generalConfig: GeneralConfig; 
                                                private sitemapConfig: SitemapConfig; 
                                                private directoryTreeConfig: DirectoryTreeConfig; 
                                                private multithreadingConfig: MultithreadingConfig; 
                                                private specificUrlList: string[] = []; 
                                                private customStartingPoints: string[] = []; 
                                                private asyncOperationsConfig: AsyncOperationsConfig; 
                                                private rateLimitConfig: RateLimitConfig; 
                                                private httpHeaderConfig: HttpHeaderConfig; 
                                                constructor( 
                                                private configService: ConfigService, 
                                                private inclusionExclusionService: InclusionExclusionService 
                                                this.generalConfig = new GeneralConfig(configService); 
                                                this.sitemapConfig = new SitemapConfig(configService); 
                                                this.directoryTreeConfig = new DirectoryTreeConfig(configService); 
                                                this.multithreadingConfig = new MultithreadingConfig(configService); 
                                                this.asyncOperationsConfig = new AsyncOperationsConfig(configService); 
                                                this.rateLimitConfig = new RateLimitConfig(configService); 
                                                this.httpHeaderConfig = new HttpHeaderConfig(configService); 
                                                this.loadRulesFromEnv(); 
                                                this.loadSpecificUrlListFromEnv(); 
                                                this.loadCustomStartingPointsFromEnv(); 
                                                getKeywordExtractionConfig() { 
                                                return { 
ECHO is off.
                                                getSecurityHeaderConfig() { 
                                                return { 
                                                getMetaDescriptionConfig() { 
                                                return { 
                                                getHttpHeaderConfig() { 
                                                return this.httpHeaderConfig.getConfig(); 
                                                getUrlAnalysisConfig() { 
                                                return { 
                                                getContentTypeConfig() { 
                                                return { 
                                                getTitleTagConfig() { 
                                                return { 
                                                getHttpStatusCodeConfig() { 
                                                return { 
                                                informational: { 
                                                success: { 
                                                redirection: { 
                                                clientError: { 
                                                serverError: { 
ECHO is off.
ECHO is off.
                                                getCrawlerConfig() { 
                                                return { 
                                                specificUrlList: this.specificUrlList, 
                                                customStartingPoints: this.customStartingPoints, 
ECHO is off.
                                                getRobotsTxtAdherence(): boolean { 
                                                return this.generalConfig.getConfig().respectRobotsTxt; 
                                                validateCrawlLimits(urlLimit: number, depthLimit: number): void { 
                                                if (urlLimit <= 0 || depthLimit <= 0) { 
                                                throw new Error('URL limit and depth limit must be positive integers'); 
                                                getInclusionRules(): Rule[] { 
                                                return this.inclusionExclusionService.getInclusionRules(); 
ECHO is off.
                                                getExclusionRules(): Rule[] { 
                                                return this.inclusionExclusionService.getExclusionRules(); 
                                                addInclusionRule(pattern: string, isRegex: boolean = false) { 
                                                this.inclusionExclusionService.addInclusionRule(pattern, isRegex); 
                                                addExclusionRule(pattern: string, isRegex: boolean = false) { 
                                                this.inclusionExclusionService.addExclusionRule(pattern, isRegex); 
                                                removeInclusionRule(pattern: string) { 
                                                this.inclusionExclusionService.removeInclusionRule(pattern); 
                                                removeExclusionRule(pattern: string) { 
                                                this.inclusionExclusionService.removeExclusionRule(pattern); 
                                                getSpecificUrlList(): string[] { 
                                                return this.specificUrlList; 
                                                setSpecificUrlList(urlList: string[]): void { 
                                                this.specificUrlList = urlList; 
                                                getDirectoryTreeConfig() { 
                                                return this.directoryTreeConfig.getConfig(); 
                                                getCustomStartingPoints(): string[] { 
                                                return this.customStartingPoints; 
                                                setCustomStartingPoints(startingPoints: string[]): void { 
                                                this.customStartingPoints = startingPoints; 
                                                getMultithreadingConfig() { 
                                                return this.multithreadingConfig.getConfig(); 
                                                getAsyncOperationsConfig() { 
                                                return this.asyncOperationsConfig.getConfig(); 
                                                private loadRulesFromEnv() { 
                                                if (rule) this.addInclusionRule(rule.trim()); 
                                                if (rule) this.addExclusionRule(rule.trim()); 
                                                private loadSpecificUrlListFromEnv() { 
                                                private loadCustomStartingPointsFromEnv() { 
                                                getRateLimitConfig() { 
                                                return this.rateLimitConfig.getConfig(); 
 
                                                import { Injectable } from '@nestjs/common'; 
                                                import { Injectable } from '@nestjs/common'; 
                                                export interface Rule { 
                                                pattern: string; 
                                                isRegex: boolean; 
ECHO is off.
                                                export class InclusionExclusionService { 
                                                private inclusionRules: Rule[] = []; 
                                                private exclusionRules: Rule[] = []; 
                                                addInclusionRule(pattern: string, isRegex: boolean = false): void { 
                                                this.inclusionRules.push({ pattern, isRegex }); 
                                                addExclusionRule(pattern: string, isRegex: boolean = false): void { 
                                                this.exclusionRules.push({ pattern, isRegex }); 
                                                removeInclusionRule(pattern: string): void { 
                                                removeExclusionRule(pattern: string): void { 
                                                isUrlAllowed(url: string): boolean { 
                                                if (isIncluded) return false; 
                                                private matchRule(url: string, rule: Rule): boolean { 
                                                if (rule.isRegex) { 
                                                const regex = new RegExp(rule.pattern); 
                                                return regex.test(url); 
                                                return url.includes(rule.pattern); 
                                                getInclusionRules(): Rule[] { 
                                                return [...this.inclusionRules]; 
                                                getExclusionRules(): Rule[] { 
                                                return [...this.exclusionRules]; 
 
                                                    import { ConfigService } from '@nestjs/config'; 
                                                    import { ConfigService } from '@nestjs/config'; 
                                                    import { getNumberConfig, getBooleanConfig } from '../utils/config-helpers'; 
                                                    import { getNumberConfig, getBooleanConfig } from '../utils/config-helpers'; 
                                                    export class AsyncOperationsConfig { 
                                                    constructor(private configService: ConfigService) {} 
                                                    getConfig() { 
                                                    return { 
                                                    concurrencyLimit: getNumberConfig(this.configService, 'CRAWLER_ASYNC_CONCURRENCY_LIMIT', 10), 
                                                    useAsyncHttpRequests: getBooleanConfig(this.configService, 'CRAWLER_USE_ASYNC_HTTP_REQUESTS', true), 
                                                    asyncBatchSize: getNumberConfig(this.configService, 'CRAWLER_ASYNC_BATCH_SIZE', 5), 
                                                    asyncTimeout: getNumberConfig(this.configService, 'CRAWLER_ASYNC_TIMEOUT', 30000), 
 
                                                    import { ConfigService } from '@nestjs/config'; 
                                                    import { ConfigService } from '@nestjs/config'; 
                                                    import { getBooleanConfig, getNumberConfig, getArrayConfig } from '../utils/config-helpers'; 
                                                    import { getBooleanConfig, getNumberConfig, getArrayConfig } from '../utils/config-helpers'; 
                                                    export class DirectoryTreeConfig { 
                                                    constructor(private configService: ConfigService) {} 
                                                    getConfig() { 
                                                    return { 
                                                    directoryTreeEnabled: getBooleanConfig(this.configService, 'CRAWLER_DIRECTORY_TREE_ENABLED', true), 
                                                    directoryTreeMaxDepth: getNumberConfig(this.configService, 'CRAWLER_DIRECTORY_TREE_MAX_DEPTH', 5), 
                                                    directoryTreeAllowedExtensions: getArrayConfig(this.configService, 'CRAWLER_DIRECTORY_TREE_ALLOWED_EXTENSIONS', ['html', 'htm', 'php', 'asp', 'aspx']), 
                                                    directoryTreeExcludePatterns: getArrayConfig(this.configService, 'CRAWLER_DIRECTORY_TREE_EXCLUDE_PATTERNS', ['private', 'admin', 'backup']), 
 
                                                    import { ConfigService } from '@nestjs/config'; 
                                                    import { ConfigService } from '@nestjs/config'; 
                                                    import { getNumberConfig, getStringConfig, getBooleanConfig, getArrayConfig } from '../utils/config-helpers'; 
                                                    import { getNumberConfig, getStringConfig, getBooleanConfig, getArrayConfig } from '../utils/config-helpers'; 
                                                    export class GeneralConfig { 
                                                    constructor(private configService: ConfigService) {} 
                                                    getConfig() { 
                                                    return { 
                                                    defaultUrlLimit: getNumberConfig(this.configService, 'CRAWLER_DEFAULT_URL_LIMIT', 1000), 
                                                    defaultDepthLimit: getNumberConfig(this.configService, 'CRAWLER_DEFAULT_DEPTH_LIMIT', 5), 
                                                    userAgent: getStringConfig(this.configService, 'CRAWLER_USER_AGENT', 'SeoOptimizer Crawler/1.0'), 
                                                    respectRobotsTxt: getBooleanConfig(this.configService, 'CRAWLER_RESPECT_ROBOTS_TXT', true), 
                                                    crawlDelay: getNumberConfig(this.configService, 'CRAWLER_CRAWL_DELAY', 1000), 
                                                    followInternalLinks: getBooleanConfig(this.configService, 'CRAWLER_FOLLOW_INTERNAL_LINKS', true), 
                                                    followExternalLinks: getBooleanConfig(this.configService, 'CRAWLER_FOLLOW_EXTERNAL_LINKS', false), 
                                                    followSubfolderLinks: getBooleanConfig(this.configService, 'CRAWLER_FOLLOW_SUBFOLDER_LINKS', true), 
 
                                                    import { ConfigService } from '@nestjs/config'; 
                                                    import { ConfigService } from '@nestjs/config'; 
                                                    import { getBooleanConfig, getNumberConfig } from '../utils/config-helpers'; 
                                                    import { getBooleanConfig, getNumberConfig } from '../utils/config-helpers'; 
                                                    export class HttpHeaderConfig { 
                                                    constructor(private configService: ConfigService) {} 
                                                    getConfig() { 
                                                    return { 
                                                    xRobotsTagEnabled: getBooleanConfig(this.configService, 'X_ROBOTS_TAG_ENABLED', true), 
                                                    xRobotsTagMaxLength: getNumberConfig(this.configService, 'X_ROBOTS_TAG_MAX_LENGTH', 1000), 
 
                                                    import { ConfigService } from '@nestjs/config'; 
                                                    import { ConfigService } from '@nestjs/config'; 
                                                    import { getNumberConfig, getBooleanConfig } from '../utils/config-helpers'; 
                                                    import { getNumberConfig, getBooleanConfig } from '../utils/config-helpers'; 
                                                    export class MultithreadingConfig { 
                                                    constructor(private configService: ConfigService) {} 
                                                    getConfig() { 
                                                    return { 
                                                    enableMultithreading: getBooleanConfig(this.configService, 'CRAWLER_ENABLE_MULTITHREADING', true), 
                                                    maxThreads: getNumberConfig(this.configService, 'CRAWLER_MAX_THREADS', 4), 
                                                    threadPoolSize: getNumberConfig(this.configService, 'CRAWLER_THREAD_POOL_SIZE', 10), 
 
                                                    import { ConfigService } from '@nestjs/config'; 
                                                    import { ConfigService } from '@nestjs/config'; 
                                                    import { getNumberConfig } from '../utils/config-helpers'; 
                                                    import { getNumberConfig } from '../utils/config-helpers'; 
                                                    export class RateLimitConfig { 
                                                    constructor(private configService: ConfigService) {} 
                                                    getConfig() { 
                                                    return { 
                                                    bucketCapacity: getNumberConfig(this.configService, 'RATE_LIMITER_BUCKET_CAPACITY', 60), 
                                                    refillRate: getNumberConfig(this.configService, 'RATE_LIMITER_REFILL_RATE', 1), 
                                                    enabled: getNumberConfig(this.configService, 'RATE_LIMITER_ENABLED', 1), 
 
                                                    import { ConfigService } from '@nestjs/config'; 
                                                    import { ConfigService } from '@nestjs/config'; 
                                                    import { getBooleanConfig, getArrayConfig, getNumberConfig, getStringConfig } from '../utils/config-helpers'; 
                                                    import { getBooleanConfig, getArrayConfig, getNumberConfig, getStringConfig } from '../utils/config-helpers'; 
                                                    export class SitemapConfig { 
                                                    constructor(private configService: ConfigService) {} 
                                                    getConfig() { 
                                                    return { 
                                                    sitemapEnabled: getBooleanConfig(this.configService, 'CRAWLER_SITEMAP_ENABLED', true), 
                                                    sitemapTypes: getArrayConfig(this.configService, 'CRAWLER_SITEMAP_TYPES', ['xml', 'rss', 'atom', 'txt']), 
                                                    sitemapLimit: getNumberConfig(this.configService, 'CRAWLER_SITEMAP_LIMIT', 1000), 
                                                    sitemapPriority: getStringConfig(this.configService, 'CRAWLER_SITEMAP_PRIORITY', 'high'), 
                                                    extractSitemapsFromRobots: getBooleanConfig(this.configService, 'CRAWLER_EXTRACT_SITEMAPS_FROM_ROBOTS', true), 
                                                    extractSitemapsFromHtml: getBooleanConfig(this.configService, 'CRAWLER_EXTRACT_SITEMAPS_FROM_HTML', true), 
 
                                                        import { ConfigService } from '@nestjs/config'; 
                                                        import { ConfigService } from '@nestjs/config'; 
                                                        export function getNumberConfig(configService: ConfigService, key: string, defaultValue: number): number { 
                                                        return value  defaultValue; 
                                                        export function getStringConfig(configService: ConfigService, key: string, defaultValue: string): string { 
                                                        return value  defaultValue; 
                                                        export function getBooleanConfig(configService: ConfigService, key: string, defaultValue: boolean): boolean { 
                                                        if (value === undefined) return defaultValue; 
                                                        return value.toLowerCase() === 'true'; 
                                                        export function getArrayConfig(configService: ConfigService, key: string, defaultValue: string[]): string[] { 
 
                                                            import { Controller, Post, Query, Body, ValidationPipe, Get } from '@nestjs/common'; 
                                                            import { Controller, Post, Query, Body, ValidationPipe, Get } from '@nestjs/common'; 
                                                            import { CrawlerService } from '../services/crawler.service'; 
                                                            import { CrawlerService } from '../services/crawler.service'; 
                                                            import { CrawlerConfigService } from '../config/crawler-config.service'; 
                                                            import { CrawlerConfigService } from '../config/crawler-config.service'; 
                                                            import { SpecificUrlListDto } from '../dto/specific-url-list.dto'; 
                                                            import { SpecificUrlListDto } from '../dto/specific-url-list.dto'; 
                                                            import { SitemapCrawlerService } from '../services/sitemap/sitemap-crawler.service'; 
                                                            import { SitemapCrawlerService } from '../services/sitemap/sitemap-crawler.service'; 
                                                            import { ConfigService } from '@nestjs/config'; 
                                                            import { ConfigService } from '@nestjs/config'; 
                                                            import { CrawlOptionsDto } from '../dto/crawl-options.dto'; 
                                                            import { CrawlOptionsDto } from '../dto/crawl-options.dto'; 
                                                            export class CrawlerController { 
                                                            constructor( 
                                                            private readonly crawlerService: CrawlerService, 
                                                            private readonly crawlerConfigService: CrawlerConfigService, 
                                                            private readonly sitemapCrawlerService: SitemapCrawlerService, 
                                                            private readonly configService: ConfigService 
                                                            async crawlWebsite( 
                                                            const { 
                                                            url, 
                                                            urlLimit, 
                                                            depthLimit, 
                                                            followInternalLinks, 
                                                            followExternalLinks, 
                                                            followSubfolderLinks, 
                                                            addInclusionRule, 
                                                            addExclusionRule, 
                                                            removeInclusionRule, 
                                                            removeExclusionRule, 
                                                            useDirectoryTreeCrawling, 
                                                            directoryTreeRootPath, 
                                                            specificUrlList, 
                                                            customStartingPoints, 
                                                            sitemapEnabled 
                                                            if (addInclusionRule) { 
                                                            this.crawlerConfigService.addInclusionRule(addInclusionRule); 
                                                            if (addExclusionRule) { 
                                                            this.crawlerConfigService.addExclusionRule(addExclusionRule); 
                                                            if (removeInclusionRule) { 
                                                            this.crawlerConfigService.removeInclusionRule(removeInclusionRule); 
                                                            if (removeExclusionRule) { 
                                                            this.crawlerConfigService.removeExclusionRule(removeExclusionRule); 
                                                            return this.crawlerService.crawlWebsite(url, { 
                                                            urlLimit, 
                                                            depthLimit, 
                                                            followInternalLinks, 
                                                            followExternalLinks, 
                                                            followSubfolderLinks, 
                                                            specificUrlList: specificUrlList?.urls, 
                                                            useDirectoryTreeCrawling, 
                                                            directoryTreeRootPath, 
                                                            customStartingPoints, 
                                                            sitemapEnabled 
                                                            async crawlSpecificUrls( 
                                                            return this.crawlerService.crawlWebsite(specificUrlListDto.urls[0], { 
                                                            urlLimit, 
                                                            depthLimit, 
                                                            specificUrlList: specificUrlListDto.urls 
                                                            async crawlSitemap(@Query('url') url: string) { 
                                                            const sitemaps = await this.sitemapCrawlerService.discoverSitemaps(url); 
                                                            let allUrls: string[] = []; 
                                                            for (const sitemap of sitemaps) { 
                                                            const urls = await this.sitemapCrawlerService.fetchSitemap(sitemap); 
                                                            allUrls = [...allUrls, ...urls]; 
                                                            allUrls = allUrls.slice(0, crawlLimit); 
                                                            break; 
                                                            return this.crawlerService.crawlWebsite(url, { 
                                                            specificUrlList: allUrls, 
                                                            urlLimit: crawlLimit 
                                                            async crawlDirectoryTree( 
                                                            return this.crawlerService.crawlWebsite(rootPath, { 
                                                            urlLimit, 
                                                            depthLimit, 
                                                            useDirectoryTreeCrawling: true, 
                                                            directoryTreeRootPath: rootPath 
 
                                                            import { WebSocketGateway, WebSocketServer } from '@nestjs/websockets'; 
                                                            import { WebSocketGateway, WebSocketServer } from '@nestjs/websockets'; 
                                                            import { OnEvent } from '@nestjs/event-emitter'; 
                                                            import { OnEvent } from '@nestjs/event-emitter'; 
                                                            import { Server } from 'socket.io'; 
                                                            import { Server } from 'socket.io'; 
                                                            cors: { 
                                                            origin: 'http://localhost:3000', 
                                                            methods: ['GET', 'POST'], 
                                                            credentials: true, 
                                                            export class CrawlerGateway { 
                                                            server: Server; 
                                                            handleCrawlingProgress(payload: { crawlingId: string; percentage: number; currentUrl: string }) { 
                                                            this.server.emit('crawlingProgress', payload); 
                                                            this.server.emit('crawlingCompleted', payload); 
 
                                                            import { Module } from '@nestjs/common'; 
                                                            import { Module } from '@nestjs/common'; 
                                                            import { CacheModule } from '@nestjs/cache-manager'; 
                                                            import { CacheModule } from '@nestjs/cache-manager'; 
                                                            import { MongooseModule } from '@nestjs/mongoose'; 
                                                            import { MongooseModule } from '@nestjs/mongoose'; 
                                                            import { ConfigModule, ConfigService } from '@nestjs/config'; 
                                                            import { ConfigModule, ConfigService } from '@nestjs/config'; 
                                                            import { HttpModule } from '@nestjs/axios'; 
                                                            import { HttpModule } from '@nestjs/axios'; 
                                                            import { CrawlerController } from './crawler.controller'; 
                                                            import { CrawlerController } from './crawler.controller'; 
                                                            import { CrawlerService } from '../services/crawler.service'; 
                                                            import { CrawlerService } from '../services/crawler.service'; 
                                                            import { CrawlerGateway } from './crawler.gateway'; 
                                                            import { CrawlerGateway } from './crawler.gateway'; 
                                                            import { CrawlingSession, CrawlingSessionSchema } from '../schemas/crawling-session.schema'; 
                                                            import { CrawlingSession, CrawlingSessionSchema } from '../schemas/crawling-session.schema'; 
                                                            import { CrawlingData, CrawlingDataSchema } from '../schemas/crawling-data.schema'; 
                                                            import { CrawlingData, CrawlingDataSchema } from '../schemas/crawling-data.schema'; 
                                                            import { SitemapModule } from '../../seo/sitemap/sitemap.module'; 
                                                            import { SitemapModule } from '../../seo/sitemap/sitemap.module'; 
                                                            import { EventEmitterModule } from '@nestjs/event-emitter'; 
                                                            import { EventEmitterModule } from '@nestjs/event-emitter'; 
                                                            import { ContentExtractor } from '../services/extraction/content-extractor'; 
                                                            import { ContentExtractor } from '../services/extraction/content-extractor'; 
                                                            import { SEOAnalyzer } from '../services/analysis/seo-analyzer'; 
                                                            import { SEOAnalyzer } from '../services/analysis/seo-analyzer'; 
                                                            import { UrlExtractor } from '../services/extraction/url-extractor'; 
                                                            import { UrlExtractor } from '../services/extraction/url-extractor'; 
                                                            import { CrawlingDataRepository } from '../repository/crawling-data.repository'; 
                                                            import { CrawlingDataRepository } from '../repository/crawling-data.repository'; 
                                                            import { CrawlerConfigService } from '../config/crawler-config.service'; 
                                                            import { CrawlerConfigService } from '../config/crawler-config.service'; 
                                                            import { RobotsTxtService } from '../services/robot/robots-txt.service'; 
                                                            import { RobotsTxtService } from '../services/robot/robots-txt.service'; 
                                                            import { InclusionExclusionService } from '../config/inclusion-exclusion.service'; 
                                                            import { InclusionExclusionService } from '../config/inclusion-exclusion.service'; 
                                                            import { SitemapCrawlerService } from '../services/sitemap/sitemap-crawler.service'; 
                                                            import { SitemapCrawlerService } from '../services/sitemap/sitemap-crawler.service'; 
                                                            import { SitemapParser } from '../services/sitemap/sitemap-parser'; 
                                                            import { SitemapParser } from '../services/sitemap/sitemap-parser'; 
                                                            import { DirectoryTreeCrawlerService } from '../services/directory-tree/directory-tree-crawler.service'; 
                                                            import { DirectoryTreeCrawlerService } from '../services/directory-tree/directory-tree-crawler.service'; 
                                                            import { DirectoryTreeAnalyzer } from '../services/analysis/directory-tree-analyzer'; 
                                                            import { DirectoryTreeAnalyzer } from '../services/analysis/directory-tree-analyzer'; 
                                                            import { CrawlerWorker } from '../services/crawler-worker.service'; 
                                                            import { CrawlerWorker } from '../services/crawler-worker.service'; 
                                                            import { AsyncHttpService } from '../services/async-http.service'; 
                                                            import { AsyncHttpService } from '../services/async-http.service'; 
                                                            import { ProgressService } from '../services/progress.service'; 
                                                            import { ProgressService } from '../services/progress.service'; 
                                                            import { RateLimiterService } from '../services/rate-limiter.service'; 
                                                            import { RateLimiterService } from '../services/rate-limiter.service'; 
                                                            import { PerformanceMonitorService } from '../services/performance-monitor.service'; 
                                                            import { PerformanceMonitorService } from '../services/performance-monitor.service'; 
                                                            import { QueuedTask, QueuedTaskSchema } from '../schemas/queued-task.schema'; 
                                                            import { QueuedTask, QueuedTaskSchema } from '../schemas/queued-task.schema'; 
                                                            import { UrlAnalyzerService } from '../services/analysis/url-analyzer.service'; 
                                                            import { UrlAnalyzerService } from '../services/analysis/url-analyzer.service'; 
                                                            import { HttpHeaderService } from '../services/analysis/http-header.service'; 
                                                            import { HttpHeaderService } from '../services/analysis/http-header.service'; 
                                                            import { ContentTypeAnalyzerService } from '../services/analysis/content-type-analyzer.service'; 
                                                            import { ContentTypeAnalyzerService } from '../services/analysis/content-type-analyzer.service'; 
                                                            import { OnPageElementService } from '../services/analysis/on-page-element.service'; 
                                                            import { OnPageElementService } from '../services/analysis/on-page-element.service'; 
                                                            import { SiteKeywordAnalyzerService } from '../services/analysis/site-keyword-analyzer.service'; 
                                                            import { SiteKeywordAnalyzerService } from '../services/analysis/site-keyword-analyzer.service'; 
                                                            import { CrawlingSessionService } from '../services/crawling-session.service'; 
                                                            import { CrawlingSessionService } from '../services/crawling-session.service'; 
                                                            import { KeywordExtractionService } from '../services/analysis/keyword-extraction.service'; 
                                                            import { KeywordExtractionService } from '../services/analysis/keyword-extraction.service'; 
                                                            imports: [ 
                                                            imports: [ 
                                                            ConfigModule.forRoot({ 
                                                            isGlobal: true, 
                                                            envFilePath: '.env', 
                                                            MongooseModule.forRootAsync({ 
                                                            imports: [ConfigModule], 
                                                            imports: [ConfigModule], 
                                                            useNewUrlParser: true, 
                                                            useUnifiedTopology: true, 
                                                            inject: [ConfigService], 
                                                            MongooseModule.forFeature([ 
                                                            CacheModule.register(), 
                                                            SitemapModule, 
                                                            EventEmitterModule.forRoot(), 
                                                            HttpModule, 
                                                            controllers: [CrawlerController], 
                                                            providers: [ 
                                                            CrawlerService, 
                                                            CrawlerGateway, 
                                                            ContentExtractor, 
                                                            SEOAnalyzer, 
                                                            UrlExtractor, 
                                                            CrawlingDataRepository, 
                                                            CrawlerConfigService, 
                                                            RobotsTxtService, 
                                                            InclusionExclusionService, 
                                                            SitemapCrawlerService, 
                                                            SitemapParser, 
                                                            DirectoryTreeCrawlerService, 
                                                            DirectoryTreeAnalyzer, 
                                                            CrawlerWorker, 
                                                            AsyncHttpService, 
                                                            ProgressService, 
                                                            RateLimiterService, 
                                                            PerformanceMonitorService, 
                                                            UrlAnalyzerService, 
                                                            HttpHeaderService, 
                                                            ContentTypeAnalyzerService, 
                                                            OnPageElementService, 
                                                            SiteKeywordAnalyzerService, 
                                                            CrawlingSessionService, 
                                                            KeywordExtractionService, 
                                                            exports: [CrawlerService, UrlAnalyzerService], 
                                                            export class CrawlerModule {}  
 
                                                                import { IsOptional, IsString, IsNumber, IsBoolean, IsArray } from 'class-validator'; 
                                                                import { IsOptional, IsString, IsNumber, IsBoolean, IsArray } from 'class-validator'; 
                                                                import { Type } from 'class-transformer'; 
                                                                import { Type } from 'class-transformer'; 
                                                                import { SpecificUrlListDto } from './specific-url-list.dto'; 
                                                                import { SpecificUrlListDto } from './specific-url-list.dto'; 
                                                                export class CrawlOptionsDto { 
                                                                url: string; 
                                                                urlLimit?: number; 
                                                                depthLimit?: number; 
                                                                followInternalLinks?: boolean; 
                                                                followExternalLinks?: boolean; 
                                                                followSubfolderLinks?: boolean; 
                                                                addInclusionRule?: string; 
                                                                addExclusionRule?: string; 
                                                                removeInclusionRule?: string; 
                                                                removeExclusionRule?: string; 
                                                                useDirectoryTreeCrawling?: boolean; 
                                                                directoryTreeRootPath?: string; 
                                                                specificUrlList?: SpecificUrlListDto; 
                                                                customStartingPoints?: string[]; 
